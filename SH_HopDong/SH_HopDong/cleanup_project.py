#!/usr/bin/env python3
"""
Script ƒë·ªÉ d·ªçn d·∫πp c√°c file kh√¥ng c·∫ßn thi·∫øt trong d·ª± √°n
"""
import os
import shutil
from pathlib import Path

def cleanup_project():
    """D·ªçn d·∫πp c√°c file kh√¥ng c·∫ßn thi·∫øt"""
    
    # Danh s√°ch file c√≥ th·ªÉ x√≥a
    files_to_remove = [
        # Test files
        "test_contract_text.py",
        "test_upload.py", 
        "test_sqlserver_connection.py",
        "test_contract.txt",
        
        # SQL Server migration files (n·∫øu kh√¥ng d√πng SQL Server)
        "migrate_to_sqlserver.py",
        "sqlserver_setup.sql",
        "recreate_database_utf8.sql", 
        "fix_encoding_final.sql",
        "update_database_encoding.sql",
        "update_contract_types.sql",
        "MIGRATION_GUIDE.md",
        
        # Utility scripts (t√πy ch·ªçn)
        "create_sample_data.py",
        "create_sample_tags.py",
        "fix_contract_types.py", 
        "update_contract_types.py",
    ]
    
    # Danh s√°ch th∆∞ m·ª•c c√≥ th·ªÉ x√≥a
    dirs_to_remove = [
        "app/__pycache__",
    ]
    
    print("üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp d·ª± √°n...")
    print("=" * 50)
    
    removed_files = []
    removed_dirs = []
    
    # X√≥a files
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                removed_files.append(file_path)
                print(f"‚úÖ ƒê√£ x√≥a file: {file_path}")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è  File kh√¥ng t·ªìn t·∫°i: {file_path}")
    
    # X√≥a directories
    for dir_path in dirs_to_remove:
        if os.path.exists(dir_path):
            try:
                shutil.rmtree(dir_path)
                removed_dirs.append(dir_path)
                print(f"‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c: {dir_path}")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {dir_path}: {e}")
        else:
            print(f"‚ö†Ô∏è  Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {dir_path}")
    
    print("=" * 50)
    print(f"üéâ Ho√†n th√†nh! ƒê√£ x√≥a {len(removed_files)} files v√† {len(removed_dirs)} th∆∞ m·ª•c")
    
    if removed_files:
        print("\nüìÅ Files ƒë√£ x√≥a:")
        for f in removed_files:
            print(f"  - {f}")
    
    if removed_dirs:
        print("\nüìÇ Th∆∞ m·ª•c ƒë√£ x√≥a:")
        for d in removed_dirs:
            print(f"  - {d}")
    
    # Hi·ªÉn th·ªã k√≠ch th∆∞·ªõc ti·∫øt ki·ªám ƒë∆∞·ª£c (∆∞·ªõc t√≠nh)
    print(f"\nüíæ ∆Ø·ªõc t√≠nh ti·∫øt ki·ªám: ~{len(removed_files) * 10}KB")
    
    print("\n‚ú® D·ª± √°n ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp!")
    print("üìù L∆∞u √Ω: C√°c file core c·ªßa ·ª©ng d·ª•ng v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n")

def show_files_to_remove():
    """Hi·ªÉn th·ªã danh s√°ch file s·∫Ω b·ªã x√≥a ƒë·ªÉ ng∆∞·ªùi d√πng xem tr∆∞·ªõc"""
    files_to_remove = [
        "test_contract_text.py",
        "test_upload.py", 
        "test_sqlserver_connection.py",
        "test_contract.txt",
        "migrate_to_sqlserver.py",
        "sqlserver_setup.sql",
        "recreate_database_utf8.sql", 
        "fix_encoding_final.sql",
        "update_database_encoding.sql",
        "update_contract_types.sql",
        "MIGRATION_GUIDE.md",
        "create_sample_data.py",
        "create_sample_tags.py",
        "fix_contract_types.py", 
        "update_contract_types.py",
    ]
    
    dirs_to_remove = [
        "app/__pycache__",
    ]
    
    print("üìã Danh s√°ch file/th∆∞ m·ª•c s·∫Ω b·ªã x√≥a:")
    print("=" * 50)
    
    print("üìÑ Files:")
    for f in files_to_remove:
        status = "‚úÖ T·ªìn t·∫°i" if os.path.exists(f) else "‚ùå Kh√¥ng t·ªìn t·∫°i"
        print(f"  - {f} ({status})")
    
    print("\nüìÅ Th∆∞ m·ª•c:")
    for d in dirs_to_remove:
        status = "‚úÖ T·ªìn t·∫°i" if os.path.exists(d) else "‚ùå Kh√¥ng t·ªìn t·∫°i"
        print(f"  - {d} ({status})")

if __name__ == "__main__":
    print("üßπ Script d·ªçn d·∫πp d·ª± √°n SH_HopDong")
    print("=" * 50)
    
    choice = input("B·∫°n mu·ªën:\n1. Xem danh s√°ch file s·∫Ω x√≥a\n2. Th·ª±c hi·ªán d·ªçn d·∫πp\nCh·ªçn (1/2): ")
    
    if choice == "1":
        show_files_to_remove()
    elif choice == "2":
        confirm = input("\n‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c file n√†y? (y/N): ")
        if confirm.lower() in ['y', 'yes']:
            cleanup_project()
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c d·ªçn d·∫πp")
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
